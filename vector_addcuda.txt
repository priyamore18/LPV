// vector_add.cu
#include <stdio.h>

__global__ void vecAdd(float *A, float *B, float *C, int N) { //gpu function
    int i = blockIdx.x * blockDim.x + threadIdx.x; // global thread index that uniquely indextify into entirer grid
    if (i < N)
        C[i] = A[i] + B[i];
}

int main() {
    int N = 5;
    size_t size = N * sizeof(float);
    float A[] = {1, 2, 3, 4, 5};
    float B[] = {10, 20, 30, 40, 50};
    float C[5];

    float *d_A, *d_B, *d_C; // these are pointers
    cudaMalloc(&d_A, size);  //Allocate GPU memory for array A 
    cudaMalloc(&d_B, size);  //Allocate GPU memory for array B
    cudaMalloc(&d_C, size);  //Allocate GPU memory for array C

    cudaMemcpy(d_A, A, size, cudaMemcpyHostToDevice); // copy data cpu to gpu
    //cudaMemcpy(destination, source, size, direction)
    cudaMemcpy(d_B, B, size, cudaMemcpyHostToDevice);

    vecAdd<<<1, N>>>(d_A, d_B, d_C, N);  //it launches the gpu kernel with 1 block with n thread

    cudaMemcpy(C, d_C, size, cudaMemcpyDeviceToHost);

    printf("Result Vector C:\n");
    for (int i = 0; i < N; i++)
        printf("%f ", C[i]);
    printf("\n");

    cudaFree(d_A);
    cudaFree(d_B);
    cudaFree(d_C);
    return 0;
}